import os
import threading
import time
import re
from datetime import datetime
from urllib.parse import urlparse

import telebot
import feedparser
import schedule
import openai
from openai import OpenAI
from flask import Flask, request

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

if not BOT_TOKEN or not OPENAI_API_KEY:
    print("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ OPENAI_API_KEY")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ OpenAI
bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_sources = {}      # {telegram_id: [url1, url2]}
sent_articles = {}     # {telegram_id: [link1, link2]}
news_count = {}        # {telegram_id: 0}
user_states = {}       # {telegram_id: 'waiting_for_sources'}

# –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
FREE_NEWS_LIMIT = 10

def is_valid_rss_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω–æ–π RSS-–ª–µ–Ω—Ç–æ–π"""
    try:
        parsed = urlparse(url)
        if not parsed.scheme or not parsed.netloc:
            return False
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å RSS
        feed = feedparser.parse(url)
        return len(feed.entries) > 0
    except:
        return False

def process_article_with_ai(article_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—å—é —Å –ø–æ–º–æ—â—å—é AI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç"""
    try:
        title = article_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        summary = article_data.get('summary', '')
        link = article_data.get('link', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
        article_text = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {summary}"
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–∑—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –µ–≥–æ –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –≥–æ—Ç–æ–≤—ã–π –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç. –°—Ç–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. –í –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫."
                },
                {
                    "role": "user",
                    "content": article_text
                }
            ],
            max_tokens=500,
            temperature=0.7
        )
        
        ai_text = response.choices[0].message.content.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if link and link not in ai_text:
            ai_text += f"\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {link}"
        
        return ai_text
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏ AI: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ AI
        title = article_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        summary = article_data.get('summary', '')
        link = article_data.get('link', '')
        
        return f"üì∞ {title}\n\n{summary}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {link}"

def monitor_news():
    """–§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    print(f"[{datetime.now()}] –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    for user_id, sources in user_sources.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–æ–≤–æ—Å—Ç–µ–π
        if news_count.get(user_id, 0) >= FREE_NEWS_LIMIT:
            continue
            
        try:
            for source_url in sources:
                # –ü–∞—Ä—Å–∏–º RSS-–ª–µ–Ω—Ç—É
                feed = feedparser.parse(source_url)
                
                if not feed.entries:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
                user_sent = sent_articles.get(user_id, [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
                for entry in feed.entries[:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç–∞—Ç–µ–π
                    article_link = entry.get('link', '')
                    
                    if article_link and article_link not in user_sent:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é —Å AI
                        article_data = {
                            'title': entry.get('title', ''),
                            'summary': entry.get('summary', ''),
                            'link': article_link
                        }
                        
                        ai_post = process_article_with_ai(article_data)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        try:
                            bot.send_message(user_id, ai_post, parse_mode='HTML')
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            if user_id not in sent_articles:
                                sent_articles[user_id] = []
                            sent_articles[user_id].append(article_link)
                            
                            news_count[user_id] = news_count.get(user_id, 0) + 1
                            
                            print(f"[{datetime.now()}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            if news_count.get(user_id, 0) >= FREE_NEWS_LIMIT:
                                bot.send_message(
                                    user_id,
                                    "ÔøΩÔøΩ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤. "
                                    "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '–ù–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ê–≥–µ–Ω—Ç–∞' –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, "
                                    "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏: @newsagent_support"
                                )
                                break
                                
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    schedule.every().hour.do(monitor_news)
    
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –Ω–µ "–∑–∞—Å—ã–ø–∞–ª")
app = Flask(__name__)

@app.route('/')
def home():
    return "ÔøΩÔøΩ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/health')
def health():
    return {
        "status": "ok", 
        "users": len(user_sources), 
        "timestamp": datetime.now().isoformat(),
        "active_users": len([uid for uid in user_sources.keys() if news_count.get(uid, 0) < FREE_NEWS_LIMIT])
    }

def run_web_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    
    # –û–±–Ω—É–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sources[user_id] = []
    sent_articles[user_id] = []
    news_count[user_id] = 0
    user_states[user_id] = 'waiting_for_sources'
    
    welcome_text = (
        "ÔøΩÔøΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–ù–æ–≤–æ—Å—Ç–Ω–æ–π –ê–≥–µ–Ω—Ç'!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–µ AI –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤–∞—à–∏—Ö RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\n"
        "üìã –ö–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
        "1. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ RSS-–ª–µ–Ω—Ç—ã (–ø–æ –æ–¥–Ω–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)\n"
        "2. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done\n\n"
        "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: –∫–∞–∂–¥—ã–π —á–∞—Å\n\n"
        "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –≤–∞—à–∏ RSS-—Å—Å—ã–ª–∫–∏!"
    )
    
    bot.send_message(user_id, welcome_text)

# –ö–æ–º–∞–Ω–¥–∞ /done
@bot.message_handler(commands=['done'])
def done_command(message):
    user_id = message.from_user.id
    
    if user_id not in user_sources or not user_sources[user_id]:
        bot.send_message(
            user_id,
            "‚ùå –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ RSS-–ª–µ–Ω—Ç—ã."
        )
        return
    
    user_states[user_id] = 'monitoring'
    
    sources_count = len(user_sources[user_id])
    sources_list = "\n".join([f"‚Ä¢ {url}" for url in user_sources[user_id]])
    
    confirmation_text = (
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {sources_count}\n"
        f"ÔøΩÔøΩ –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n{sources_list}\n\n"
        f"ÔøΩÔøΩ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —á–∞—Å.\n"
        f"üì¨ –ù–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        f"ÔøΩÔøΩ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {FREE_NEWS_LIMIT}"
    )
    
    bot.send_message(user_id, confirmation_text)

# –ö–æ–º–∞–Ω–¥–∞ /status
@bot.message_handler(commands=['status'])
def status_command(message):
    user_id = message.from_user.id
    
    if user_id not in user_sources:
        bot.send_message(
            user_id,
            "‚ùå –í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return
    
    sources_count = len(user_sources.get(user_id, []))
    sent_count = news_count.get(user_id, 0)
    remaining = FREE_NEWS_LIMIT - sent_count
    
    status_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üì∞ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {sources_count}\n"
        f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {sent_count}\n"
        f"üéÅ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {remaining}\n\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if remaining > 0 else '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω'}"
    )
    
    bot.send_message(user_id, status_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (RSS-—Å—Å—ã–ª–∫–∏)
@bot.message_handler(func=lambda message: True)
def handle_text_message(message):
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_states.get(user_id) != 'waiting_for_sources':
        bot.send_message(
            user_id,
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL
    if not (text.startswith('http://') or text.startswith('https://')):
        bot.send_message(
            user_id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://)"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å RSS-—Å—Å—ã–ª–∫–∏
    if not is_valid_rss_url(text):
        bot.send_message(
            user_id,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å RSS-–ª–µ–Ω—Ç—É –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    if user_id not in user_sources:
        user_sources[user_id] = []
    
    if text in user_sources[user_id]:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –≠—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω."
        )
        return
    
    user_sources[user_id].append(text)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ RSS-–ª–µ–Ω—Ç—ã
    try:
        feed = feedparser.parse(text)
        feed_title = feed.feed.get('title', 'RSS-–ª–µ–Ω—Ç–∞')
    except:
        feed_title = 'RSS-–ª–µ–Ω—Ç–∞'
    
    bot.send_message(
        user_id,
        f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {feed_title}\n"
        f"ÔøΩÔøΩ {text}\n\n"
        f"ÔøΩÔøΩ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(user_sources[user_id])}\n"
        f"üìù –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done"
    )

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
scheduler_thread.start()

# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
web_thread = threading.Thread(target=run_web_server, daemon=True)
web_thread.start()

if __name__ == "__main__":
    print("ü§ñ –ó–∞–ø—É—Å–∫ '–ù–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ê–≥–µ–Ω—Ç–∞'...")
    print("ÔøΩÔøΩ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å)")
    print("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    print("ÔøΩÔøΩ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
